using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Xml;

namespace SSRSReportGeneration
{
    class Program
    {
        static async Task Main(string[] args)
        {
            string reportServerUrl = "http://yourserver/ReportServer/ReportExecution2005.asmx";  // Replace with your SSRS server URL
            string reportPath = "/Path/To/YourReport";  // The report path in SSRS (e.g., "/Reports/Sales/MonthlyReport")
            string outputFileName = "GeneratedReport.pdf";  // Output file name for the report

            // Call the method to generate the report
            await GenerateSSRSReport(reportServerUrl, reportPath, outputFileName);
        }

        public static async Task GenerateSSRSReport(string reportServerUrl, string reportPath, string outputFileName)
        {
            try
            {
                using (HttpClient client = new HttpClient())
                {
                    // Set up the SOAP request body
                    string soapEnvelope = $@"
                    <soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:rep='http://schemas.microsoft.com/sqlserver/reporting/2005/06/01/reportexecution'>
                        <soapenv:Header/>
                        <soapenv:Body>
                            <rep:LoadReport>
                                <rep:Report>{reportPath}</rep:Report>
                                <rep:HistoryID></rep:HistoryID>
                            </rep:LoadReport>
                        </soapenv:Body>
                    </soapenv:Envelope>";

                    // Send the SOAP request to load the report
                    var content = new StringContent(soapEnvelope, Encoding.UTF8, "text/xml");
                    HttpResponseMessage response = await client.PostAsync(reportServerUrl, content);
                    response.EnsureSuccessStatusCode();

                    // Read the response (Execution ID)
                    string responseContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(responseContent);  // For debugging, to see the raw XML response

                    // Now call the Render method using the Execution ID
                    string executionID = ExtractExecutionID(responseContent);

                    // Render the report
                    byte[] reportData = await RenderReport(client, reportServerUrl, executionID, "PDF");

                    // Save the report to a file
                    await System.IO.File.WriteAllBytesAsync(outputFileName, reportData);
                    Console.WriteLine($"Report generated successfully and saved as {outputFileName}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error generating report: {ex.Message}");
            }
        }

        public static string ExtractExecutionID(string responseContent)
        {
            // You will need to parse the XML response and extract the ExecutionID from it
            var xmlDoc = new XmlDocument();
            xmlDoc.LoadXml(responseContent);
            XmlNode executionIDNode = xmlDoc.SelectSingleNode("//ExecutionID");
            return executionIDNode?.InnerText;
        }

        public static async Task<byte[]> RenderReport(HttpClient client, string reportServerUrl, string executionID, string format = "PDF")
        {
            string renderSoapEnvelope = $@"
            <soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:rep='http://schemas.microsoft.com/sqlserver/reporting/2005/06/01/reportexecution'>
                <soapenv:Header/>
                <soapenv:Body>
                    <rep:Render>
                        <rep:Format>{format}</rep:Format>
                        <rep:ExecutionID>{executionID}</rep:ExecutionID>
                    </rep:Render>
                </soapenv:Body>
            </soapenv:Envelope>";

            var renderContent = new StringContent(renderSoapEnvelope, Encoding.UTF8, "text/xml");
            HttpResponseMessage response = await client.PostAsync(reportServerUrl, renderContent);
            response.EnsureSuccessStatusCode();

            // Get the report data in byte array format
            byte[] reportData = await response.Content.ReadAsByteArrayAsync();
            return reportData;
        }
    }
}

